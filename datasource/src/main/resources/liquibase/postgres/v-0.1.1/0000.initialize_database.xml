<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
	xmlns="http://www.liquibase.org/xml/ns/dbchangelog/1.7"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog/1.7
         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.7.xsd">

	<changeSet id="0000.initialize_database" author="Eugene A. Kalosha &lt;ekalosha@dfusiontech.com&gt;">

		<sql>

			---------- ---------- ---------- ---------- ---------- START [vocabularies] ---------- ---------- ---------- ---------- ----------

			CREATE TYPE IdpType as ENUM ('GOOGLE', 'MICROSOFT', 'FACEBOOK', 'TWITTER');
			CREATE TYPE LanguageDirection as ENUM ('LTR', 'RTL');
			CREATE TYPE LanguageConstantScopeType as ENUM ('WEB_UI', 'WEB_ADMIN', 'SERVER', 'IOS', 'ANDROID');

			CREATE TABLE IF NOT EXISTS continents
			(
				id serial,
				code character varying(3) COLLATE pg_catalog."default" NOT NULL,
				name character varying(65) COLLATE pg_catalog."default" DEFAULT NULL::character varying,
				CONSTRAINT pk_continents PRIMARY KEY (id)
			);
			CREATE UNIQUE INDEX ui_continents_code ON continents USING btree (code);
			CREATE UNIQUE INDEX ui_continents_name ON continents USING btree (name);

			CREATE TABLE countries
			(
				id serial,
				continent_id integer,
				country_name character varying(65) DEFAULT NULL,
				country_code character varying(3) NOT NULL,
				phone_code character varying(7),
				CONSTRAINT pk_countries PRIMARY KEY (id),
				CONSTRAINT fk_countries_to_continents FOREIGN KEY (continent_id) REFERENCES continents (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION
			);
			CREATE INDEX i_countries_continent_id ON countries USING btree (continent_id);
			CREATE INDEX i_countries_phone_code ON countries USING btree (phone_code);
			CREATE UNIQUE INDEX ui_countries_code ON countries USING btree (country_code);
			CREATE UNIQUE INDEX ui_countries_name ON countries USING btree (country_name);

			CREATE TABLE states
			(
				id serial,
				country_id integer NOT NULL,
				state_name character varying(65) NOT NULL,
				state_code character varying(3),
				CONSTRAINT pk_states PRIMARY KEY (id),
				CONSTRAINT fk_states_to_countries FOREIGN KEY (country_id) REFERENCES countries (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION
			);
			CREATE INDEX i_state_country_id ON states USING btree (country_id);
			CREATE INDEX i_state_name ON states USING btree (state_name);
			CREATE UNIQUE INDEX ui_states_name_country ON states USING btree (country_id, state_name);

			CREATE TABLE cities
			(
				id serial,
				country_id integer NOT NULL,
				state_id integer,
				city_name character varying(65) NOT NULL,
				population integer,
				latitude double precision,
				longitude double precision,
				CONSTRAINT pk_cities PRIMARY KEY (id),
				CONSTRAINT fk_cities_to_countries FOREIGN KEY (country_id) REFERENCES countries (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION,
				CONSTRAINT fk_cities_to_states FOREIGN KEY (state_id) REFERENCES states (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION
			);
			CREATE INDEX i_city_country_id ON cities USING btree (country_id);
			CREATE INDEX i_city_country_state ON cities USING btree (country_id, state_id);
			CREATE INDEX i_city_name ON cities USING btree (city_name);
			CREATE INDEX i_city_state_id ON cities USING btree (state_id);

			CREATE TABLE currencies
			(
				id serial,
				name character varying(63),
				code character varying(6) NOT NULL,
				symbol character varying(6),
				CONSTRAINT pk_currencies PRIMARY KEY (id)
			);
			CREATE INDEX i_currencies_name ON currencies USING btree (name);
			CREATE UNIQUE INDEX ui_currencies_code ON currencies USING btree (code);

			CREATE TABLE languages
			(
				id serial,
				code character varying(8) NOT NULL,
				name character varying(65),
				charset character varying(32),
				locale character varying(8),
				CONSTRAINT pk_languages PRIMARY KEY (id)
			);
			CREATE INDEX i_languages_code ON languages USING btree (code);
			CREATE INDEX i_languages_locale ON languages USING btree (locale);
			CREATE INDEX i_languages_name ON languages USING btree (name);
			CREATE UNIQUE INDEX ui_languages_charset ON languages USING btree (charset);

			CREATE TABLE language_constants
			(
				id serial,
				name character varying(127) NOT NULL,
				scope LanguageConstantScopeType,
				CONSTRAINT pk_language_constants PRIMARY KEY (id)
			);
			CREATE INDEX i_language_constants_scope ON language_constants USING btree (scope);
			CREATE UNIQUE INDEX ui_language_constants_name ON language_constants USING btree (name, scope);

			CREATE TABLE supported_languages
			(
				id serial,
				name character varying (127) NOT NULL,
				iso_code character varying (10) DEFAULT NULL,
				charset character varying (32) DEFAULT NULL,
				locale character varying (8) DEFAULT NULL,
				direction LanguageDirection DEFAULT 'LTR',
				is_public boolean DEFAULT false,
				CONSTRAINT pk_supported_languages PRIMARY KEY (id)
			);
			CREATE INDEX i_supported_languages_name ON supported_languages (name);
			CREATE INDEX i_supported_languages_iso_code ON supported_languages (iso_code);
			CREATE UNIQUE INDEX ui_supported_languages_charset ON supported_languages (charset);
			CREATE INDEX i_supported_languages_locale ON supported_languages (locale);

			CREATE TABLE language_constant_values
			(
				id serial,
				language_id integer NOT NULL,
				language_constant_id integer NOT NULL,
				value text DEFAULT '',
				CONSTRAINT pk_language_constant_values PRIMARY KEY (id)
				, CONSTRAINT fk_language_constant_values_to_language FOREIGN KEY (language_id) REFERENCES supported_languages (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION
				, CONSTRAINT fk_language_constant_values_to_constant FOREIGN KEY (language_constant_id) REFERENCES language_constants (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION
			);
			CREATE INDEX i_language_constant_values_language ON language_constant_values (language_id);
			CREATE UNIQUE INDEX ui_language_constant_values_const_lang ON language_constant_values (language_id, language_constant_id);

			---------- ---------- ---------- ---------- ---------- END [vocabularies] ---------- ---------- ---------- ---------- ----------

			---------- ---------- ---------- ---------- ---------- START [organizations] ---------- ---------- ---------- ---------- ----------
			CREATE TABLE status
			(
				id serial,
				status character varying (63) NOT NULL,
				description text DEFAULT NULL,
				CONSTRAINT pk_status PRIMARY KEY (id)
			);
			CREATE UNIQUE INDEX ui_status_name ON status (status);

			CREATE TABLE organizations
			(
				id serial,
				name character varying(127) NOT NULL,
				description text,
				tax_id character varying(32),
				vat_id character varying(32),
				street_address_1 character varying(255),
				street_address_2 character varying(255),
				country_id integer,
				state_id integer,
				city_id integer,
				zip character varying(16),
				phone character varying(20),
				site character varying(255),
				currency_id integer,
				language_id integer,
				status_id integer,
				notes text,
				parent_id integer,
				root_parent_id integer,
				owner_id integer,
				is_multi_language boolean DEFAULT false,
				use_multi_factor_auth boolean DEFAULT false,
				CONSTRAINT pk_organizations PRIMARY KEY (id),
				CONSTRAINT fk_organizations_to_city FOREIGN KEY (city_id) REFERENCES cities (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION,
				CONSTRAINT fk_organizations_to_countries FOREIGN KEY (country_id) REFERENCES countries (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION,
				CONSTRAINT fk_organizations_to_currency FOREIGN KEY (currency_id) REFERENCES currencies (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION,
				CONSTRAINT fk_organizations_to_language FOREIGN KEY (language_id) REFERENCES languages (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION,
				CONSTRAINT fk_organizations_to_parent_organizations FOREIGN KEY (parent_id) REFERENCES organizations (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION,
				CONSTRAINT fk_organizations_to_root_parent FOREIGN KEY (root_parent_id) REFERENCES organizations (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION,
				CONSTRAINT fk_organizations_to_states FOREIGN KEY (state_id) REFERENCES states (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION,
				CONSTRAINT fk_organizations_to_status FOREIGN KEY (status_id) REFERENCES status (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION
			);
			CREATE INDEX i_organization_city ON organizations USING btree (city_id);
			CREATE INDEX i_organization_country ON organizations USING btree (country_id);
			CREATE INDEX i_organization_currency ON organizations USING btree (currency_id);
			CREATE INDEX i_organization_language ON organizations USING btree (language_id);
			CREATE INDEX i_organization_name ON organizations USING btree (name);
			CREATE INDEX i_organization_owner ON organizations USING btree (owner_id);
			CREATE INDEX i_organization_parent ON organizations USING btree (parent_id);
			CREATE INDEX i_organization_root_parent ON organizations USING btree (root_parent_id);
			CREATE INDEX i_organization_state ON organizations USING btree (state_id);

			CREATE TABLE organization_to_language
			(
				id serial,
				organization_id integer NOT NULL,
				language_id integer NOT NULL,

				CONSTRAINT pk_organization_to_language PRIMARY KEY(id)
				, CONSTRAINT fk_organization_to_language_to_organization FOREIGN KEY (organization_id) REFERENCES organizations (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION
				, CONSTRAINT fk_organization_to_language_to_language FOREIGN KEY (language_id) REFERENCES supported_languages (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION
			);
			CREATE INDEX i_organization_to_language_organization ON organization_to_language (organization_id);
			CREATE INDEX i_organization_to_language_language ON organization_to_language (language_id);
			---------- ---------- ---------- ---------- ---------- END [organizations] ---------- ---------- ---------- ---------- ----------

			---------- ---------- ---------- ---------- ---------- START [users] ---------- ---------- ---------- ---------- ----------
			CREATE TABLE users
			(
				id serial,
				first_name character varying (128) DEFAULT NULL,
				last_name character varying (128) DEFAULT NULL,
				email character varying (128) NOT NULL,
				password character varying (65) DEFAULT NULL,
				corporate_phone character varying (20) DEFAULT NULL,
				mobile_phone character varying (20) DEFAULT NULL,
				enabled boolean default true,
				expired boolean default false,
				credentials_expired boolean default false,
				locked boolean default false,
				created_at timestamp without time zone NOT NULL DEFAULT now(),
				updated_at timestamp without time zone NOT NULL DEFAULT now(),
				expiration_date timestamp without time zone DEFAULT NULL,
				credentials_expiration_date timestamp without time zone DEFAULT NULL,
				notes text DEFAULT NULL,
				organization_id integer,
				created_by_id integer,
				updated_by_id integer,
				is_deleted boolean NOT NULL DEFAULT false,
				full_name character varying(255),
				business_unit_id integer,
				title character varying(127),
				last_login_date timestamp without time zone,
				use_multi_factor_auth boolean DEFAULT false,
				delete_date timestamp without time zone,
				CONSTRAINT pk_users PRIMARY KEY (id)
			);
			CREATE UNIQUE INDEX ui_users_email ON users (email);
			CREATE INDEX i_users_first_name ON users (first_name);
			CREATE INDEX i_users_last_name ON users (last_name);
			CREATE INDEX i_users_corporate_phone ON users (corporate_phone);
			CREATE INDEX i_users_mobile_phone ON users (mobile_phone);
			CREATE INDEX i_users_created_at ON users (created_at);
			CREATE INDEX i_users_updated_at ON users (updated_at);

			---------- ---------- ---------- ---------- ---------- END [users] ---------- ---------- ---------- ---------- ----------

			CREATE TABLE roles
			(
				id serial,
				name character varying (16) NOT NULL,
				description character varying (65) DEFAULT NULL,
				CONSTRAINT pk_roles PRIMARY KEY (id)
			);
			CREATE UNIQUE INDEX ui_roles_name ON roles (name);


			CREATE TABLE user_roles
			(
				id serial,
				user_id integer NOT NULL,
				role_id integer NOT NULL,
				created_at timestamp without time zone NOT NULL DEFAULT now(),
				updated_at timestamp without time zone NOT NULL DEFAULT now(),
				CONSTRAINT pk_user_roles PRIMARY KEY (id),
				CONSTRAINT fk_user_roles_to_users FOREIGN KEY (user_id) REFERENCES users (id) MATCH SIMPLE ON UPDATE CASCADE ON DELETE CASCADE,
				CONSTRAINT fk_user_roles_to_roles FOREIGN KEY (role_id) REFERENCES roles (id) MATCH SIMPLE ON UPDATE CASCADE ON DELETE CASCADE
			);
			CREATE UNIQUE INDEX ui_user_roles ON user_roles (user_id, role_id);
			CREATE INDEX ui_user_roles_user_id ON user_roles (user_id);
			CREATE INDEX ui_user_roles_role_id ON user_roles (role_id);

			CREATE TABLE permissions
			(
				id serial,
				name character varying (255) NOT NULL DEFAULT '',
				description text DEFAULT NULL,
				CONSTRAINT pk_permissions PRIMARY KEY (id)
			);
			CREATE INDEX i_permissions_name ON permissions (name);

			CREATE TABLE role_permissions
			(
				id serial,
				role_id integer DEFAULT NULL,
				permission_id integer DEFAULT NULL,
				CONSTRAINT pk_role_permissions PRIMARY KEY (id)
				, CONSTRAINT fk_role_permissions_to_permission FOREIGN KEY (permission_id) REFERENCES permissions (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION
				, CONSTRAINT fk_role_permissions_to_role FOREIGN KEY (role_id) REFERENCES roles (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION
			);
			CREATE INDEX i_role_permissions_role ON role_permissions (role_id);
			CREATE INDEX i_role_permissions_permission ON role_permissions (permission_id);
			CREATE UNIQUE INDEX ui_role_permissions_permission_role ON role_permissions (permission_id, role_id);

			CREATE TABLE user_password_reset_links
			(
				id serial,
				code character varying (64) NOT NULL,
				user_id integer NOT NULL,
				active boolean NOT NULL DEFAULT true,
				created_at timestamp without time zone NOT NULL DEFAULT now(),
				expired_at timestamp without time zone NOT NULL DEFAULT now(),
				CONSTRAINT pk_user_password_reset_links PRIMARY KEY (id)
				, CONSTRAINT fk_user_password_reset_links_to_user FOREIGN KEY (user_id) REFERENCES users (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION
			);
			CREATE UNIQUE INDEX ui_user_password_reset_links_code ON user_password_reset_links (code);
			CREATE INDEX i_user_password_reset_links_user ON user_password_reset_links (user_id);

			create table oauth_access_token (
				token_id VARCHAR(256) PRIMARY KEY,
				token bytea,
				authentication_id VARCHAR(256),
				user_name VARCHAR(256),
				client_id VARCHAR(256),
				authentication bytea,
				refresh_token VARCHAR(256)
			);
			CREATE UNIQUE INDEX ui_oauth_access_token_id ON oauth_access_token (token_id);
			CREATE INDEX i_oauth_access_token_authentication_id ON oauth_access_token (authentication_id);
			CREATE INDEX i_oauth_access_token_user_name ON oauth_access_token (user_name);
			CREATE INDEX i_oauth_access_token_client_id ON oauth_access_token (client_id);

			create table oauth_refresh_token (
				token_id VARCHAR(256) PRIMARY KEY,
				token bytea,
				authentication bytea
			);
			CREATE UNIQUE INDEX ui_oauth_refresh_token_id ON oauth_access_token (token_id);

		</sql>

		<rollback>
		</rollback>
	</changeSet>

</databaseChangeLog>
